char * longestPalindrome(char * s){
    int len = strlen(s);
    int start = 0;
    int mid = 0;
    int max = 0;
    int extend = 0;
    while(mid < len){
        //计算形如 "cabbac"以"bb"为中心的回文字符串
        extend = 0;
        while(mid - extend >= 0 && mid + extend + 1 < len && s[mid - extend] == s[mid + extend + 1]){
            extend++;
        }
        if(2 * extend >= max){
            max = 2 * extend;
            start = mid - extend + 1;
        }
        //计算形如 "cabac"中以"b"为中心的回文字符串
        extend = 0;
        while(mid - extend - 1 >= 0 && mid + extend + 1 < len && s[mid - extend - 1] == s[mid + extend + 1]){
            extend++;
        }
        if(2 * extend + 1 >= max){
            max = 2 * extend + 1;
            start = mid - extend;
        }
        mid++;
    }
    
    char *result = (char *)malloc((max + 1) * sizeof(char));
    for(int i = 0;i < max; i++){
        result[i] = s[start + i];
    }
    result[max] = '\0';
    
    return result;
}