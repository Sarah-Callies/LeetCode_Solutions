/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    if(l1 == NULL && l2 == NULL)
        return NULL;
    else if(l1 == NULL)
        return l2;
    else if(l2 == NULL)
        return l1;
    
    struct ListNode *head = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode *last = (struct ListNode*)malloc(sizeof(struct ListNode));

    if(l1->val <= l2->val){
        head = l1;
        last = l1;        
    }
    else{
        head = l2;
        last = l2;
    }
    bool first = true;
    while(l1 && l2){
        int val1 = l1->val;
        int val2 = l2->val;
        
        if(val1 <= val2){
            last = l1;
            l1 = l1->next;

        }
        else{
            struct ListNode *temp = (struct ListNode*)malloc(sizeof(struct ListNode));
            temp = l2->next;
            last->next = l2;
            l2->next = l1;
            last = l2;
            l2 = temp; 
        } 
    }
    if(l1 == NULL){
        last->next = l2;
    }
    return head;    
}

struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    if(listsSize <= 0){
        return NULL;
    }
    else if(listsSize > 1){
        struct ListNode *sub1 = lists[listsSize - 1];
        struct ListNode *sub2 = lists[listsSize - 2];
        struct ListNode * subHead = mergeTwoLists(sub1, sub2);
        lists[listsSize - 2] = subHead;
        mergeKLists(lists, listsSize - 1);
    }

    return lists[0];
}